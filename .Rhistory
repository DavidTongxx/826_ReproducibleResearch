"rqtl/qtl2data/master/B6BTBR")
geno <- read_csv(file.path(datapath, "b6btbr_geno.csv"),
comment="#",na=c("","NA","-"))
pmap <- read_csv(file.path(datapath, "b6btbr_pmap.csv"),comment="#",
col_types=list(col_character(),col_character(),col_double()))
pheno <- read_csv(file.path(datapath, "b6btbr_pheno.csv"),comment="#")
covar <- read_csv(file.path(datapath, "b6btbr_covar.csv"),comment="#")
View(pheno)
View(geno)
View(pmap)
summary(pmap$chr)
range(pmap$chr)
covar$MouseNum
identical(covar$MouseNum,pheno$MouseNum)
View(covar)
View(geno)
View(geno)
View(pheno)
View(geno)
View(pmap)
str(pheno)
summary(pheno$agouti_tan)
summary(pheno$tufted)
range(pheno$tufted)
summary(pmap$chr)
summary(as.numeric(pmap$chr))
pheno$log10_insulin_10wk
pmap$chr
pheno
summary(pmap)
plot(pheno$log10_insulin_10wk)
plot(pheno$log10_insulin_10wk)
summary(pheno$log10_insulin_10wk)
plot(pheno$log10_insulin_10wk)
ggplot2(pheno$log10_insulin_10wk)
ggplot(pheno$log10_insulin_10wk)
suppressPackageStartupMessages({
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggtern)
library(lme4)
library(gridExtra)
library(grid)
library(rstan)
library(broom)
})
ggplot(pheno$log10_insulin_10wk)
pmap$pos
pmap_delete_X <- pmap[-pmap$chr=="X",]
pmap$chr
pmap_delete_X <- pmap[pmap$chr=="X",]
pmap_delete_X <- pmap[pmap$chr!="X",]
?list
?list
pmap_19 <- list()
pmap_deleteX <- pmap[pmap$chr!="X",]
pmap_19 <- list()
for(i in 1:19){
pmap_19[[i]] <- pmap_deleteX[as.numeric(pmap_deleteX$chr)==i,]
}
pmap_19
pmap_19[[1]]
summary(pmap_19[[i]])
summary(pmap_19)
pmap_19[1]
pmap_19[2]
summary(pmap_19)
for(i in 1:19){
pmap_19[i] <- pmap_deleteX[as.numeric(pmap_deleteX$chr)==i,]
}
pmap_19 <- list()
for(i in 1:19){
pmap_19[i] <- pmap_deleteX[as.numeric(pmap_deleteX$chr)==i,]
}
for(i in 1:19){
pmap_19[[i]] <- pmap_deleteX[as.numeric(pmap_deleteX$chr)==i,]
}
summary(pmap_19)
dim(pmap_19)
dim(pmap_19[[1]])
dim(pmap_19[[2]])
for(i in 1:19){
pmap_19[[i]] <- pmap_deleteX[as.numeric(pmap_deleteX$chr)==i,]
num_19[i] <-dim(pmap_19[[i]])[1]
}
num_19 <- rep(0,19)
for(i in 1:19){
pmap_19[[i]] <- pmap_deleteX[as.numeric(pmap_deleteX$chr)==i,]
num_19[i] <-dim(pmap_19[[i]])[1]
}
num_19
sum(num_19)
num_19
pheno$Sex <- covar$Sex
ggplot(pheno,aes(y=log10_insulin_10wk,x=Sex,shape=Sex))+
geom_point(position=position_jitter(width=0.5))+
ggtitle("Sex v.s. log10_insulin_10wk")
set.seed(1)
suppressPackageStartupMessages({
library(combinat)
library(ggplot2)
})
y <- c(125,18,20,34)
obs_pos <-function(theta){
y <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(y/sum(y))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
obs_pos(0.5)
y <- c(125,18,20,34)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
pos_data
obs_pos(0.5)
obs_pos(0.1)
obs_pos(0.01)
?
)
?obs_pos
NSample <-rnorm(500,0.625,0.1)
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
post_mean
post_sd
log_pos <- function(theta) {
y[1]*log(2+theta) +(y[2]+y[3])*log(1-theta) +y[4]*log(theta)
}
Lp_theta <- optimize(log_pos, interval=c(0.2, 0.8), maximum=TRUE)$maximum
Lp_theta
obs_pos(Lp_theta)
Lp_sd <- sqrt(1/log_pos(Lp_theta))
Lp_sd
Lp_theta
log_pos(Lp_theta)
Lp_sd <- sqrt(1/log_pos(Lp_theta))
Lp_sd
log_pos <- function(theta) {
y[1]*log(2+theta) +(y[2]+y[3])*log(1-theta) +y[4]*log(theta)
}
Lp_theta <- optimize(log_pos, interval=c(0.2, 0.8), maximum=TRUE)$maximum
log_pos(Lp_theta)
Lp_sd <- sqrt(1/log_pos(Lp_theta))
Lp_sd
hist(w,main="The histogram of the weights")
sd(w)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output)
}
obs_pos(0.5)
obs_pos(0.6)
neg_log_post<- function(theta){
-y[1]/(2+theta)^2-(y[2]+y[3])/(1-theta)^2-y[4]/theta^2
}
neg_log_post(Lp_theta)
Lp_sd<- sqrt(-1/neg_log_post(Lp_theta))
Lp_sd
post_sd
y <- c(14,0,1,5)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
pos_data[pos_data$y==max(pos_data$y)]
pos_data
pos_data[pos_data$y==max(pos_data$y),]
NSample <-rnorm(500,0.9,0.1)
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
post_mean
y <- c(14,0,1,5)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
NSample <-rnorm(500,0.9,0.1)
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
post_mean
pos_data
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
NSample <-rnorm(500,0.9,0.1)
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
w
log_pos <- function(theta) {
y[1]*log(2+theta) +(y[2]+y[3])*log(1-theta) +y[4]*log(theta)
}
Lp_theta <- optimize(log_pos, interval=c(0.2, 0.8), maximum=TRUE)$maximum
neg_log_post<- function(theta){
-y[1]/(2+theta)^2-(y[2]+y[3])/(1-theta)^2-y[4]/theta^2
}
Lp_sd<- sqrt(-1/neg_log_post(Lp_theta))
Lp_theta
Lp_sd
hist(w,main="The histogram of the weights")
sd(w)
hist(w,main="The histogram of the weights",xlim=c(-1,2))
plot(w)
w[w>0]
?dnorm
dnorm(0)
dnorm(1)
NSample <-rnorm(500,0.9,0.1)
obs_pos(NSample)
dnorm(NSample)
NSample
range(NSample)
NSample <-rnorm(500,0.9,0.1)
NSample[NSample>=1]=0.9
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
plot(w)
hist(w,main="The histogram of the weights",xlim=c(-1,2))
hist(w,main="The histogram of the weights",xlim=c(0,2))
y <- c(14,0,1,5)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
NSample <-rnorm(500,0.9,0.01)
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
log_pos <- function(theta) {
y[1]*log(2+theta) +(y[2]+y[3])*log(1-theta) +y[4]*log(theta)
}
Lp_theta <- optimize(log_pos, interval=c(0.2, 0.8), maximum=TRUE)$maximum
neg_log_post<- function(theta){
-y[1]/(2+theta)^2-(y[2]+y[3])/(1-theta)^2-y[4]/theta^2
}
Lp_sd<- sqrt(-1/neg_log_post(Lp_theta))
NSample <-rnorm(500,0.9,0.05)
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
post_mean
post_sd
log_pos <- function(theta) {
y[1]*log(2+theta) +(y[2]+y[3])*log(1-theta) +y[4]*log(theta)
}
#find the new MLE of theta based the data
Lp_theta <- optimize(log_pos, interval=c(0.2, 0.8), maximum=TRUE)$maximum
neg_log_post<- function(theta){
-y[1]/(2+theta)^2-(y[2]+y[3])/(1-theta)^2-y[4]/theta^2
}
Lp_sd<- sqrt(-1/neg_log_post(Lp_theta))
Lp_theta
Lp_sd
hist(w,main="The histogram of the weights",xlim=c(0,2))
sd(w)
hist(w,main="The histogram of the weights",xlim=c(0,1))
sd(w)
y <- c(125,18,20,34)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
NSample <-rnorm(500,0.625,0.1)
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
log_pos <- function(theta) {
y[1]*log(2+theta) +(y[2]+y[3])*log(1-theta) +y[4]*log(theta)
}
#find the new MLE of theta based the data
Lp_theta <- optimize(log_pos, interval=c(0.2, 0.8), maximum=TRUE)$maximum
neg_log_post<- function(theta){
-y[1]/(2+theta)^2-(y[2]+y[3])/(1-theta)^2-y[4]/theta^2
}
Lp_sd<- sqrt(-1/neg_log_post(Lp_theta))
hist(w,main="The histogram of the weights")
sd(w)
EM_theta <-function(y){
# k the number of iteration
k<-50
theta<-rep(0,k+1)
theta[1]<-0.5
for( j in 1:k){
theta[j+1] <- ( y[1]*theta[j]/(theta[j]+2)    +y[4]) /( y[1]*theta[j]/(theta[j]+2)   +y[2]+y[3]+y[4])
}
theta_star<-theta[k+1]
}
y <- c(125,18,20,34)
theta_star <- EM_theta(y)
m<-400
new_theta<-rep(0,400)
for(i in 1:m){
#find the new MLE of theta based the data
prob <- c(0.5+0.25*theta_star,0.25*(1-theta_star),
0.25*(1-theta_star),0.25*theta_star)
#generate new data
y<- rmultz2(n=197, p=prob, draws=length(n))
new_theta[i]<-EM_theta(y)
}
y<- rmultz2(n=197, p=prob)
new_theta[i]<-EM_theta(y)
}
for(i in 1:m){
#find the new MLE of theta based the data
prob <- c(0.5+0.25*theta_star,0.25*(1-theta_star),
0.25*(1-theta_star),0.25*theta_star)
#generate new data
y<- rmultz2(n=197, p=prob)
new_theta[i]<-EM_theta(y)
}
plot(new_theta[1:5],main="The first 5 theta")
sd(new_theta)
plot(new_theta)
plot(new_theta)
y <- c(125,18,20,34)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
NSample <-rnorm(500,0.625,0.05)
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
```
post_mean
post_sd
log_pos <- function(theta) {
y[1]*log(2+theta) +(y[2]+y[3])*log(1-theta) +y[4]*log(theta)
}
#find the new MLE of theta based the data
Lp_theta <- optimize(log_pos, interval=c(0.2, 0.8), maximum=TRUE)$maximum
neg_log_post<- function(theta){
-y[1]/(2+theta)^2-(y[2]+y[3])/(1-theta)^2-y[4]/theta^2
}
Lp_sd<- sqrt(-1/neg_log_post(Lp_theta))
Lp_sd
Lp_theta
hist(w,main="The histogram of the weights")
sd(w)
y <- c(14,0,1,5)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
NSample <-rnorm(500,0.9,0.05)
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
post_mean
post_sd
log_pos <- function(theta) {
y[1]*log(2+theta) +(y[2]+y[3])*log(1-theta) +y[4]*log(theta)
}
Lp_theta <- optimize(log_pos, interval=c(0.2, 0.8), maximum=TRUE)$maximum
neg_log_post<- function(theta){
-y[1]/(2+theta)^2-(y[2]+y[3])/(1-theta)^2-y[4]/theta^2
}
Lp_sd<- sqrt(-1/neg_log_post(Lp_theta))
Lp_theta
Lp_sd
hist(w,main="The histogram of the weights",xlim=c(0,1))
sd(w)
hist(w,main="The histogram of the weights",xlim=c(0,0.2))
hist(w,main="The histogram of the weights",xlim=c(0,0.05))
hist(w,main="The histogram of the weights",xlim=c(0,0.02))
beta_par<-function(mu,sigma){
alpha<-mu/sigma * (mu-mu^2-sigma)
beta<-(1/mu-1)*alpha
beta_par<-function(mu,sigma){
a<-mu/sigma * (mu-mu^2-sigma)
b<-(1/mu-1)*a
return(list(alpha=a,beta=b))
}
beta_par(1/3,1/18)
)
beta_par(1/3,1/18)
beta_par<-function(mu,sigma){
a<-mu/sigma * (mu-mu^2-sigma)
b<-(1/mu-1)*a
return(list(alpha=a,beta=b))
}
beta_par(1/3,1/18)
post_mean
y <- c(125,18,20,34)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
NSample <-rnorm(500,0.625,0.05)
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
post_mean
post_sd
beta_par(0.625,0.05^2)
?rbeta
a<-58
b<-35
y <- c(125,18,20,34)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
NSample <-rbeta(500,a,b)
w <- obs_pos(NSample)/dbeta(NSample,a,b)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
post_mean
post_sd
y <- c(14,0,1,5)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
NSample <-rnorm(500,0.9,0.05)
w <- obs_pos(NSample)/dnorm(NSample)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
post_mean
post_sd
log_pos <- function(theta) {
y[1]*log(2+theta) +(y[2]+y[3])*log(1-theta) +y[4]*log(theta)
}
#find the new MLE of theta based the data
Lp_theta <- optimize(log_pos, interval=c(0.2, 0.8), maximum=TRUE)$maximum
neg_log_post<- function(theta){
-y[1]/(2+theta)^2-(y[2]+y[3])/(1-theta)^2-y[4]/theta^2
}
Lp_sd<- sqrt(-1/neg_log_post(Lp_theta))
Lp_theta
Lp_sd
beta_par(0.8,0.17^2)
beta_par(0.8,0.17^2)
a<-3.63
b<-0.91
y <- c(14,0,1,5)
obs_pos <-function(theta){
output <- (2+theta)^y[1]*(1-theta)^(y[2]+y[3])*theta^y[4]
return(output/sum(output))
}
pos_data <- data.frame(x=seq(0.01,0.99,by=0.01),y =obs_pos( seq(0.01,0.99,by=0.01) )  )
ggplot(data=pos_data,aes(x,y)) +geom_point()
NSample <-rbeta(500,a,b)
w <- obs_pos(NSample)/dbeta(NSample,a,b)
post_mean <- sum(w*NSample)/sum(w)
post_sd <-sd(w*NSample)/sum(w)
post_mean
post_sd
plot(w)
hist(w)
hist(w)
install.packages("plotly")
library(Regressionline)
?Regressionline_function
setwd("~/GitHub/826_ReproducibleResearch/RegressionLine")
install("Regressionline")
library("devtools")
library(roxygen2)
install("Regressionline")
setwd("~/GitHub/826_ReproducibleResearch")
install("Regressionline")
setwd("~/GitHub/826_ReproducibleResearch/RegressionLine")
document()
document()
setwd("..")
getwd()
install("Regressionline")
?Regressionline_function
Regressionline_function()
setwd("~/GitHub/826_ReproducibleResearch")
setwd("~/GitHub/826_ReproducibleResearch/RegressionLine")
document()
setwd("~/GitHub/826_ReproducibleResearch")
install("Regressionline")
Regressionline_function()
?Regressionline_function()
?Regressionline_function(1000,5,6)
Regressionline_function(1000,5,6)
install.packages("vignettes")
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR()
